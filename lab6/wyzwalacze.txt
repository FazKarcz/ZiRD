Zad 1
CREATE TABLE archiwum_departamentow (
  id NUMBER PRIMARY KEY,
  nazwa VARCHAR2(100),
  data_zamkniecia DATE,
  ostatni_manager VARCHAR2(200)
);
/

CREATE OR REPLACE TRIGGER trg_archive_department
AFTER DELETE ON departments
FOR EACH ROW
DECLARE
  v_manager_name VARCHAR2(200);
BEGIN
  SELECT e.first_name || ' ' || e.last_name
  INTO v_manager_name
  FROM employees e
  WHERE e.employee_id = :OLD.manager_id;

  INSERT INTO archiwum_departamentow (id, nazwa, data_zamkniecia, ostatni_manager)
  VALUES (:OLD.department_id, :OLD.department_name, SYSDATE, v_manager_name);
END;
/


Zad 2
CREATE TABLE zlodziej (
  id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  username VARCHAR2(30),
  czas_zmiany TIMESTAMP
);
/

CREATE OR REPLACE TRIGGER trg_check_salary
BEFORE INSERT OR UPDATE ON employees
FOR EACH ROW
DECLARE
  v_user VARCHAR2(30);
BEGIN
  IF :NEW.salary < 2000 OR :NEW.salary > 26000 THEN
    -- Logowanie próby "złodziejskiej"
    SELECT USER INTO v_user FROM DUAL;

    INSERT INTO zlodziej(username, czas_zmiany)
    VALUES (v_user, SYSTIMESTAMP);

    RAISE_APPLICATION_ERROR(-20010, 'Zarobki poza dozwolonym zakresem 2000 - 26000');
  END IF;
END;
/

Zad3
CREATE SEQUENCE employees_seq START WITH 1000 INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER trg_employees_id
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
  IF :NEW.employee_id IS NULL THEN
    SELECT employees_seq.NEXTVAL INTO :NEW.employee_id FROM DUAL;
  END IF;
END;
/

Zad 4
CREATE OR REPLACE TRIGGER trg_no_dml_job_grades
BEFORE INSERT OR UPDATE OR DELETE ON job_grades
BEGIN
  RAISE_APPLICATION_ERROR(-20020, 'Operacje INSERT, UPDATE i DELETE na JOB_GRADES są zabronione.');
END;
/

Zad 5
CREATE OR REPLACE TRIGGER trg_prevent_salary_update
BEFORE UPDATE OF min_salary, max_salary ON jobs
FOR EACH ROW
BEGIN
  :NEW.min_salary := :OLD.min_salary;
  :NEW.max_salary := :OLD.max_salary;
END;
/

