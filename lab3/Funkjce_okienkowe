Punkt 1:
SELECT 
    employee_id,
    first_name,
    last_name,
    salary,
    DENSE_RANK() OVER (ORDER BY salary DESC) AS ranking
FROM 
    employees;

Punkt 2:
SELECT 
    employee_id,
    first_name,
    last_name,
    salary,
    RANK() OVER (ORDER BY salary DESC) AS ranking,
    SUM(salary) OVER () AS total_salary
FROM 
    employees;

Punkt 4:
SELECT 
    e.last_name,
    p.product_name,
    SUM(s.price * s.quantity) OVER (PARTITION BY e.employee_id ORDER BY s.sale_date) AS cumulative_sales,
    RANK() OVER (ORDER BY s.price * s.quantity DESC) AS sales_rank
FROM sales s
JOIN employees e ON s.employee_id = e.employee_id
JOIN products p ON s.product_id = p.product_id;

Punkt 5:
SELECT 
    e.last_name,
    p.product_name,
    s.price,
    COUNT(*) OVER (PARTITION BY s.sale_date, s.product_id) AS daily_transactions,
    SUM(s.price * s.quantity) OVER (PARTITION BY s.sale_date, s.product_id) AS daily_total,
    LAG(s.price) OVER (PARTITION BY s.product_id ORDER BY s.sale_date) AS previous_price,
    LEAD(s.price) OVER (PARTITION BY s.product_id ORDER BY s.sale_date) AS next_price
FROM sales s
JOIN employees e ON s.employee_id = e.employee_id
JOIN products p ON s.product_id = p.product_id;

Punkt 6:
SELECT 
    p.product_name,
    s.price,
    TO_CHAR(s.sale_date, 'YYYY-MM') AS sale_month,
    SUM(s.price * s.quantity) OVER (PARTITION BY p.product_id, TO_CHAR(s.sale_date, 'YYYY-MM')) AS monthly_total,
    SUM(s.price * s.quantity) OVER (PARTITION BY p.product_id, TO_CHAR(s.sale_date, 'YYYY-MM') ORDER BY s.sale_date) AS running_monthly_total
FROM sales s
JOIN products p ON s.product_id = p.product_id;

Punkt 7:
SELECT 
    p.product_name,
    p.product_category,
    s2022.price AS price_2022,
    s2023.price AS price_2023,
    (s2023.price - s2022.price) AS price_difference
FROM (
    SELECT * FROM sales WHERE EXTRACT(YEAR FROM sale_date) = 2022
) s2022
JOIN (
    SELECT * FROM sales WHERE EXTRACT(YEAR FROM sale_date) = 2023
) s2023
  ON s2022.product_id = s2023.product_id 
 AND TO_CHAR(s2022.sale_date, 'MM-DD') = TO_CHAR(s2023.sale_date, 'MM-DD')
JOIN products p ON s2022.product_id = p.product_id;

Punkt 8:
SELECT 
    p.product_name,
    s.sale_date,
    s.price,
    ROUND(AVG(s.price) OVER (
        PARTITION BY p.product_id 
        ORDER BY s.sale_date 
        ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING
    ), 2) AS moving_avg_price
FROM sales s
JOIN products p ON s.product_id = p.product_id;

Punkt 10:
SELECT 
    p.product_name,
    p.product_category,
    s.price,
    RANK() OVER (PARTITION BY p.product_category ORDER BY s.price DESC) AS price_rank,
    ROW_NUMBER() OVER (PARTITION BY p.product_category ORDER BY s.price DESC) AS price_row_number,
    DENSE_RANK() OVER (PARTITION BY p.product_category ORDER BY s.price DESC) AS price_dense_rank
FROM sales s
JOIN products p ON s.product_id = p.product_id;

Punkt 11:
SELECT 
    e.last_name,
    p.product_name,
    SUM(s.price * s.quantity) OVER (PARTITION BY e.employee_id ORDER BY s.sale_date) AS cumulative_sales,
    RANK() OVER (ORDER BY s.price * s.quantity DESC) AS global_sales_rank
FROM sales s
JOIN employees e ON s.employee_id = e.employee_id
JOIN products p ON s.product_id = p.product_id;

Punkt 12:
SELECT DISTINCT 
    e.first_name,
    e.last_name,
    e.job_id
FROM employees e
JOIN sales s ON e.employee_id = s.employee_id;
